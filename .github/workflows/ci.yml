name: Flutter CI/CD

on:
  push:
    branches:
      - main
  pull_request: 
    branches:
      - main

jobs:
  # Build and Test Flutter App
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        architecture: 'x64'
        java-package: 'jdk'
        check-latest: false

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.1'
        channel: 'stable'
        architecture: x64
        cache: true

    - name: Verify Flutter installation
      run: flutter --version

    - name: Clean Flutter project
      run: flutter clean

    - name: Install dependencies
      run: flutter pub get
      
    - name: Check outdated dependencies
      run: flutter pub outdated

    - name: Upgrade dependencies
      run: flutter pub upgrade

    - name: Flutter Doctor
      run: flutter doctor -v
    
    - name: Run tests
      run: flutter test
      continue-on-error: true

  # Publish to Google Play Store
  android_publish:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        architecture: 'x64'
        java-package: 'jdk'
        check-latest: false

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.1'
        channel: 'stable'
        architecture: x64
        cache: true

    - name: Verify Flutter installation
      run: flutter --version

    - name: Clean Flutter project
      run: flutter clean

    - name: Install dependencies
      run: flutter pub get

    - name: Build APK (Release)
      run: flutter build appbundle --release --no-tree-shake-icons

    - name: Decode service account key
      run: echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 --decode > google-credentials.json

    - name: Check if service account file exists
      run: ls -l google-credentials.json

    - name: Authenticate with Google Play
      uses: google-github-actions/auth@v1
      with:
          credentials_json: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}

    - name: Debug the decoded service account file
      run: cat google-credentials.json 

    - name: Upload to Google Play
      id: upload_production
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJson: google-credentials.json
        packageName: com.askantechkode  # Replace with your app's actual package name
        releaseFiles: build/app/outputs/bundle/release/app-release.aab
        track: production  # Change to 'beta', 'production', etc., as required
        status: completed

  # Publish to App Store (iOS)
  ios_publish:
    runs-on: macos-latest
    needs: build_and_test
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # - name: Clone Certificates Repo
    #   run: |
    #     mkdir -p ./kode_app_cert_repo
    #     git clone https://$GITHUB_TOKEN@github.com/devaaskan/Kode_App.git ./kode_app_cert_repo
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Clone the repository using SSH
      run: git clone git@github.com:Arundevraj463/Kode_App.git ./kode_app_cert_repo
      
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.1'

    - name: Remove cached dependencies
      run: flutter pub cache clean

    - name: Install dependencies
      run: flutter pub get

    - name: Verify Generated.xcconfig
      run: |
        echo "Checking for Generated.xcconfig..."
        ls -la ios/Flutter
        if [ ! -f ios/Flutter/Generated.xcconfig ]; then
          echo "Error: Generated.xcconfig is missing. Running build_runner..."
          flutter pub get
          flutter build ios --no-codesign
        fi
    
    - name: Install Required CocoaPods Version
      run: |
        if [ -f ios/Podfile.lock ]; then          
          COCOAPODS_VER=$(sed -n -e 's/^COCOAPODS: \([0-9.]*\)/\1/p' ios/Podfile.lock)
          echo "Installing CocoaPods version $COCOAPODS_VER"
          sudo gem install cocoapods -v $COCOAPODS_VER
        else
            echo "Podfile.lock not found, installing latest CocoaPods version"
            sudo gem install cocoapods
        fi
    
    - name: Debug Directory
      run: |
        echo "Current Directory: $(pwd)"
        ls -la ios
    
    - name: Reinstall Pods
      working-directory: ios
      run: |
        pod deintegrate
        pod install --repo-update
            
    - name: Clean Flutter project
      run: flutter clean
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15'

    - name: Check Xcode and System Info
      run: |
        xcode-select -p
        xcodebuild -version
        which xcodebuild

    - name: Check Swift version
      run: swift --version

    - name: Build iOS (Release)
      run: | 
        flutter clean
        flutter pub get
        flutter build ios --no-codesign || true # Add --no-codesign flag to skip codesigning if needed

    - name: Set up App Store Connect API Key
      run: |
        mkdir -p $HOME/ios
        echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 --decode > $HOME/ios/AuthKey.json
      shell: bash

    - name: Verify API Key File
      run: |
        ls -la $HOME/ios
        cat $HOME/ios/AuthKey.json

    - name: Verify API Key Permissions
      run: ls -l $HOME/ios/AuthKey.json
    
    - name: Set up fastlane
      run: |
        gem install fastlane
        fastlane --version

    - name: Debug API Key Path
      run: |
        echo "API Key Path: $HOME/ios/AuthKey.json"

    - name: Fastlane match (Sign iOS app)
      run: fastlane match appstore --git_url git@github.com:Arundevraj463/Kode_App.git --api_key_path "$HOME/ios/AuthKey.json" --app_identifier ${{ secrets.APP_IDENTIFIER }}
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
        FASTLANE_TEAM_ID: ${{ secrets.FASTLANE_TEAM_ID }}

    - name: Build and Upload to App Store
      run: |
        fastlane gym --scheme Runner --export_method app-store  # Build the signed app
        fastlane deliver --ipa ./build/ios/ipa/Runner.ipa --skip_screenshots --skip_metadata --force --api_key_path "$HOME/ios/AuthKey.json" --app_identifier ${{ secrets.APP_IDENTIFIER }}
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Clean up certificate repo
      run: rm -rf ./kode_app_cert_repo
