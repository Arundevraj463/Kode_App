name: Flutter CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Build and Test Flutter App
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.5'  # Specify Flutter version here

    - name: Install dependencies
      run: flutter pub get

    - name: Run tests
      run: flutter test
      continue-on-error: true

    - name: Build APK (Release)
      run: flutter build apk --release

    - name: Build iOS (Release)
      run: flutter build ios --release --no-codesign

  # Publish to Google Play Store
  android_publish:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.0.0'

    - name: Install dependencies
      run: flutter pub get

    - name: Build APK (Release)
      run: flutter build apk --release

    - name: Upload to Google Play
      uses: r0adkll/upload-google-play-release-action@v1
      with:
        service_account_json: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        package_name: com.askantechkode  # Replace with your app package name
        release_file: build/app/outputs/flutter-apk/app-release.apk
        track: alpha  # Change to 'beta', 'production', etc., as required
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}

  # Publish to App Store (iOS)
  ios_publish:
    runs-on: macos-latest
    needs: build_and_test
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.0.0'

    - name: Install dependencies
      run: flutter pub get

    - name: Build iOS (Release)
      run: flutter build ios --release --no-codesign

    - name: Set up fastlane
      run: |
        gem install fastlane
        fastlane --version

    - name: Build and Upload to App Store
      run: |
        fastlane deliver --ipa ./build/ios/ipa/Runner.ipa --skip_screenshots --skip_metadata --force
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        FASTLANE_PASSWORD: ${{ secrets.APP_STORE_PASSWORD }}
        