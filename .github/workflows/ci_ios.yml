name: Flutter CI/CD

on:
  push:
    branches:
      - main
    # paths:
    #   - 'ios/**'
  pull_request:
    branches:
      - main
    # paths:
    #   - 'ios/**' 

jobs:
  # Build and Test Flutter App
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        architecture: 'x64'
        java-package: 'jdk'
        check-latest: false

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.1'
        channel: 'stable'
        architecture: x64
        cache: true

    - name: Verify Flutter installation
      run: flutter --version

    - name: Clean Flutter project
      run: flutter clean

    - name: Install dependencies
      run: flutter pub get
      
    - name: Check outdated dependencies
      run: flutter pub outdated

    - name: Upgrade dependencies
      run: flutter pub upgrade

    - name: Flutter Doctor
      run: flutter doctor -v
    
    - name: Run tests
      run: flutter test
      continue-on-error: true
    
  # Publish to App Store (iOS)
  ios_publish:
    runs-on: macos-latest
    needs: build_and_test
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2 

    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
  
    - name: Check git remote URL
      run: git remote -v
        
    - name: Clone the repository using SSH
      run: git clone git@github.com:Arundevraj463/Kode_App.git ./kode_app_cert_repo

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.1'

    - name: Remove cached dependencies
      run: flutter pub cache clean

    - name: Install dependencies
      run: flutter pub get --verbose

    - name: Verify Generated.xcconfig
      run: |
        echo "Checking for Generated.xcconfig..."
        ls -la ios/Flutter
        if [ ! -f ios/Flutter/Generated.xcconfig ]; then
          echo "Error: Generated.xcconfig is missing. Running build_runner..."
          flutter pub get
          flutter build ios --no-codesign
        fi
    
    - name: Install Required CocoaPods Version
      run: |
        if [ -f ios/Podfile.lock ]; then          
          COCOAPODS_VER=$(sed -n -e 's/^COCOAPODS: \([0-9.]*\)/\1/p' ios/Podfile.lock)
          echo "Installing CocoaPods version $COCOAPODS_VER"
          sudo gem install cocoapods -v $COCOAPODS_VER
        else
            echo "Podfile.lock not found, installing latest CocoaPods version"
            sudo gem install cocoapods
        fi    
        pod --version  # Verifying CocoaPods installation

    - name: Debug Directory
      run: |
        echo "Current Directory: $(pwd)"
        ls -la ios
    
    - name: Reinstall Pods
      working-directory: ios
      run: |
        pod deintegrate
        pod install --repo-update

    # - name: Clean Flutter project
    #   run: flutter clean

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15'

    - name: Check Xcode and System Info
      run: |
        xcode-select -p
        xcodebuild -version
        which xcodebuild
        flutter --version

    - name: Check Swift version
      run: swift --version

    - name: Build iOS (Release)
      run: | 
        flutter clean
        flutter pub get
        flutter build ios --no-codesign # || true  Add --no-codesign flag to skip codesigning if needed

    - name: Install Provisioning Profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/AppStoreProfile.mobileprovision
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles
        security find-identity -v -p codesigning
      shell: bash

    - name: Set up App Store Connect API Key
      run: |
        mkdir -p $HOME/ios
        echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 --decode > $HOME/ios/AuthKey.p8
      shell: bash

    - name: Verify API Key File
      run: ls -la $HOME/ios

    # - name: Verify API Key Permissions
    #   run: ls -l $HOME/ios/AuthKey.json

    # - name: Set up fastlane
    #   run: |
    #     gem install fastlane
    #     fastlane --version

    # - name: Debug API Key Path
    #   run: |
    #     echo "API Key Path: $HOME/ios/AuthKey.json"

    # - name: Update Fastlane and Xcode tools
    #   run: |
    #     sudo gem install fastlane --no-document
    #     sudo xcode-select --switch /Applications/Xcode.app

    - name: Authenticate Fastlane with API Key
      run: |
        fastlane match appstore --git_url git@github.com:Arundevraj463/Kode_App.git \
          --api_key_path "$HOME/ios/AuthKey.p8" \
          --api_key_id "${{ secrets.APP_STORE_CONNECT_KEY_ID }}" \
          --api_issuer "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}"
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        
    - name: Build and Upload to App Store
      run: |
        export XCODE_XCCONFIG_FILE=""
        fastlane run update_code_signing_settings path:ios/Runner.xcodeproj use_automatic_signing:true
        fastlane sigh --app_identifier ${{ secrets.APP_IDENTIFIER }}
        fastlane gym --project ./ios/Runner.xcodeproj --scheme Runner --export_method app-store --verbose 
        # || true  Add verbose flag and allow failure
        ls -l ./build/ios/ipa/

        # Check if the .ipa file exists
        if [ -f ./build/ios/ipa/Runner.ipa ]; then
          echo "IPA file exists!"
        else
          echo "IPA file not found!"
          exit 1
        fi

        fastlane deliver --ipa ./build/ios/ipa/Runner.ipa --skip_screenshots --skip_metadata --force \
          --api_key_path "$HOME/ios/AuthKey.p8" \
          --app_identifier ${{ secrets.APP_IDENTIFIER }} --verbose
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FASTLANE_TEAM_ID: ${{ secrets.FASTLANE_TEAM_ID }}

    - name: Clean up certificate repo
      run: rm -rf ./kode_app_cert_repo